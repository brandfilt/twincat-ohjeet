#+STARTUP: showall
* Mikä on TwinCAT?
TwinCAT (The Windows Control and Automation Technology) on Beckhoffin
automaatiojärjestelmien ydin.

Se on Windows PC-pohjainen ohjelmisto, joka muuttaa minkä tahansa PC:n tehokkaaksi automaatiojärjestelmien ohjaimeksi.

TwinCat 3 on ohjelmiston uusin versio, jonka avulla automaatiohjelmointia
voidaan tehdä IEC 61131-3 standardin mukaisten kielten lisäksi C ja C++
ohjelmointikielillä. Twincat 3 on rakennettu Microsoftin Visual Studio
ohjelmointiympäristön päälle.

TwinCat on jaettu komponentteihin (/Functions/) joista *TC3 Engineering* sisältää
logiikoiden konfigurointi, ohjelmointi ja debuggaus ominaisuudet. Muiden
komponenttien avulla kehitysympäristöön voidaan lisätä ominaisuuksia. Tässä
oppaassa käytetään myös *TC3 HMI Engineering* komponenttia, jonka avulla voidaan
luoda käyttöliittymiä PLC-projekteille.

Lisätieto eri TwinCAT komponenteista löytyy Beckhoffin sivuila.
https://www.beckhoff.com/english.asp?twincat/twincat-3.htm

* Asennus ja ensimmäinen käynnistys
** Vaatimukset
TwinCatin viralliset vaatimukset eivät ole kovin kummoiset mutta kannattaa ottaa
huomioon että Visual Studio on suhteellisen raskas ohjelmisto, joten käytettävän
koneen kannattaa olla tehokas.

- Windows 8 tai uudempi
- Prosessori 1.6Ghz
- 2GB RAM
- 3GB kiintolevytilaa
 

** Asennus
TwinCAT toimii osana Microsoftin Visual Studio ohjelmointiympäristöä, joten
ensimmäisenä tulee asentaa Visual Studio. Oppaan kirjoitushetkellä Beckhoffin
web-sivujen mukaan uusin Visual Studio version jota TwinCAT 3 tukee on 2017.

Visual Studion voi ladata Microsoftin sivuilta osoitteesta https://visualstudio.microsoft.com/
Visual Studion Community version lataus ja käyttö on täysin ilmaista. Oppaan
kirjoitushetkellä uusin Visual Studio oli versio 2019 jonka saa ladattua ilman
rekisteröintiä. Vanhempien versioiden, kuten oppaassa käytetyn version 2017,
lataaminen vaatii kuitenkin rekisteröitymisen.

Kun visual studio on asennettu, voidaan asentaa halutut TwinCAT komponentit.
*TE1000 XAE* on ainut vaadittu komponentti, jos halutaan vain kehittää
automaatioohjelmia, mutta käyttöliittymien kehittämiseen kannattaa asentaa myös
*TE2000 HMI*. Molempien lataus onnistuu Beckhoffin sivuilta https://www.beckhoff.com/english.asp?download/default.htm

*TE1000 XAE* asennuksen aikana voidaan valita minkä Visual Studio asennusten
kanssa TwinCAT integroidaan.

[[file:kuvat/installvs.png]]

** Lisenssi
TwinCAT 3 kehitysympäristön lisenssi on täysin ilmainen mutta se on aktivoitava uudelleen 7
päivän välein. Lisenssin aktivointi tapahtuu TwinCat projektin SYSTEM kohdan alla
olevasta License kohdasta.
#+ATTR_HTML: width="300"
[[file:kuvat/Lisenssi02.png]]

Kehityskoneen lisenssin voi aktivoida klikkaamalla "Activate 7 Days Trial
License..." ja täyttämällä kysytty koodi.

TwinCAT ehdottaa lisenssin uudelleen aktivointia myös aina käynnistettäyssä, jos
lisenssi on ehtinyt vanhentua.

Beckhoffin automaatiolaitteet käyttävät samaa TwinCAT XARa (eXtended Automation
Runtime) ympäristöä kuin kehitysympäristökin mutta niille täytyy lisenssi ostaa
laitteen hankinnan yhteydessä.

* Ensimmäinen PLC projekti
** TwinCAT projekti
TwinCAT projekti on kokonaisuus, joka vosi sisältää TwinCATin eri komponenteilla
tehtyjä aliprojekteja (PLC, HMI jne.), jotka liittyvät samaan kokonaisuuteen.

** Uusi projekti
Uusi TwinCat projekti aloitetaan valitsemalla Visual Studio File valikosta New
Project.

#+ATTR_HTML: :width="300px"
[[file:kuvat/UusiProjekti01.png]]

Sen jälkeen valitaan Template valikosta TwinCAT Project XAE, annetaan
projektille nimi ja sijainti ja luodaan projekti klikkaamalla OK.

#+ATTR_HTML: width="300"
[[file:kuvat/UusiProjekti03.png]]
** PLC projekti
Kun TwinCat projekti on luotu, täytyy siihen vielä lisätä PLC projekti,
jotta päästään ohjelmoimaan. TwinCatissä jokainen PLC projekti vastaa
"virtuaalista" logiikkakontrolleria. PLC-projekti sisältää ohjelmat, muuttujat
ja käyttöliittymät jotka logiikalle ladataan.

PLC-projektin lisäys tapahtuu klikkaamalla hiiren oikealla
puunäkymän kohtaa PLC, ja valitsemalla Add New Item.
#+CAPTION: PLC-projektin lisäys TwinCAT projektiin
[[file:kuvat/LisaaPLCProjekti01.png]]

Avautuvasta ikkunasta valitaan projektityypiksi Standard PLC Project, annetaan projektille nimi ja
klikataan OK.
[[file:kuvat/PLCProjekti02.png]]

Projektin puunäkymään PLC-kohdan alle ilmestyy luotu projekti tiedostoineen.
[[file:kuvat/PLCProjektiSisalto01.png]]
*** Kansiorakenne
PLC projektin alle luodaan automaattisesti kansiorakenne, joista tärkeimmät ovat:
- *References* Ulkoisten kirjastojen lisääminen.
- *DUTs* Data Unit Types, tietotyyppien määrittelyt.
- *GVL* Globaalien muuttujien määrittely. Globaalit muuttujat ovat käytettävissä
  kaikissa logiikkaohjelmissa ja käyttöliittymässä.
- *POU* Program Organization Unit, sisältää logiikkaohjelmat ja niihin liittyvät
  paikalliset muuttujat.
- *VISUs* Käyttöliittymien määrittely ja luominen.

* Ohjelmointi
TwinCat 3 tukee kaikkia IEC 61131-3 standardin mukaisia ohjelmointimenetelmiä,
eli LD (Ladder diagram), FBD (Function Block Diagram), ST (Structured Text), IL
(Instruction List) ja SFC (Sequential Function Chart). Tässä ohjeessa käydään
läpi lyhyesti LD, FBD ja ST ohjelmointimenetelmien käyttö TwinCat 3:ssa. Näistä
ST on tekstipohjainen ja muistuttaa eniten korkeamman tason ohjelmointikieliä
kuten (PHP, Python tai C). ST on myös
Beckhoffin suosittelema PLC ohjelmointitapa.
** PLC ohjelman lisäys
Kun TwinCAT projektiin lisää PLC projektin, luo TwinCat automaattisesti MAIN-ohjelman
PLC-projektin kansioon POU. MAIN-ohjelma on ST-ohjelma, joka on oletuksena
tyhjä. Yksinkertaisen ohjelman voi toteuttaa halutessaan suoraan
MAIN-tiedostoon, mutta monimutkaisemmat logiikkaohjelmat kannattaa jakaa
useampaan tiedostoon.

POU-kansioon voidaan lisätä eri ohjelmointimenetelmillä
toteutettuja ohjelmia eri klikkaamalla kansiota hiiren oikealla ja valitsemalla
*Add* ja *POU*. Avautuvasta ikkunasta voidaan valita ohjelmointimenetelmä ja
antaa ohjelmalle nimi.
[[file:kuvat/LisaaOhjelma01.png]]
[[file:kuvat/LisaaOhjelma02.png]]

Uudet ohjelmat eivät automaattisesti ole "käytössä" vaan ne pitää erikseen
määritellä ajettavaksi. Tämä voidaan tehdä esimerkiksi suorittamalla uusi
ohjelma MAIN-ohjelmasta käsin.
#+BEGIN_SRC
    UusiOhjelma();
#+END_SRC

** Muuttujat
Muuttujia voidaan TwinCatissä määrittää joko paikallisesti tai globaalisti.
Paikalliset muuttujat ovat yhden logiikkaohjelman käytössä, eikä niiden arvoihin
ole pääsyä muista ohjelmista. Globaaleja muuttujia voidaan käyttää kaikista
PLC-projektin ohjelmista ja käyttöliittymistä. Globaalit muuttuja ovat myös
mahdollista liittää johonkin fyysiseen tuloon tai lähtöön.

Eri muuttujatyyppejä ovat mm. BOOL, INT, UINT, REAL, TIME, DATE, ARRAY jne.
Myös ajastimet ja triggerit määritetään muuttujina.

*** Ohjelman muuttujat
PLC-ohjelman muuttujat voidaan asettaa ohjelman muokkausikkunan yläosassa
olevasta editorista.
Määrittely voidaan tehdä joko tekstipohjaisesti, taulukkona tai Auto Declare
ikkunan avulla.

Tekstipohjainen muuttujien määrittely tapahtuu formaatissa:
#+BEGIN_SRC
    /muuttujanNimi/ : /tyyppi/;
#+END_SRC
Esim.
#+BEGIN_SRC
    muuttuja1 : BOOL;
#+END_SRC

[[file:kuvat/Muuttujat01.png]]
[[file:kuvat/Muuttujat02.png]]
*** Globaalit muuttujat
Globaalien muuttujien avulla tulot ja lähdöt saadaan helposti liitettyä
ohjelmissa käytettäviin muuttujiin. Muuttujien määrittely onnistuu lisäämällä
GVL kansioon lista, joka sisältää halutut muuttuja. Muuttujien lisäys listaan tapahtuu
samalla tavalla kuin paikallisten muuttujien lisäys ohjelmiin.

Muuttujaan voidaan määrittää myös erityinen rekisteriosoite, joka voidaan myöhemmin mapata johonkin
fyysiseen tuloon tai lähtöön. Määrittäminen tapahtuu lisäämällä muuttujan nimen
perään AT ja halutun rekisterin tyyppi ja osoite %-merkin jälkeen. Rekisterin
tyyppi ja osoite erotetaan X-kirjaimella.
Esim. input rekisteri 0.0

#+BEGIN_SRC
    /muuttujanNimi/ AT %IX0.0 : /tyyppi/;
#+END_SRC
Asettamalla osoitteen tilalle tähti (*), mapataan osoite automaattisesti.

#+BEGIN_SRC
    /muuttujanNimi/ AT %I* : /tyyppi/;
#+END_SRC
Muuttujat voidaan linkittää johonkin lähtöön tai tuloon I/O valikon alta, kun
laitteet on lisätty.

Output rekisterit määritetään korvaamall I-kirjain Q:lla.

#+BEGIN_SRC
    /muuttujanNimi/ AT %QX0.0 : /tyyppi/;
#+END_SRC
Kun projekti käännetään muuttujien määrittämisen jälkeen (*Build Solution*),
ilmestyy PLC-projektin alla olevaan virtuaaliseen logiikkaohjaimeen (*PLC
Instance*) globaaleja muuttujia vastaavat lähdöt ja tulot.

Kun globaaleja muuttujia halutaan käyttään ohjelmissa, täytyy muuttujan nimen
eteen lisätä sen tiedoston nimi jossa muuttuja on määritelty. Esim *GVL.muuttujanNimi*
** Ohjelmointiesimerkit
Seuraavaksi esitellään LD, FBD ja ST ohjelmointia yksinkertaisen esimerkin
avulla. Ennen esimerkkien tekemistä tulisi määrittää globaalit *BOOL* muuttujat
bMerkkivalo, bKytkin ja bPainonappi GVL-tiedostoon.

#+BEGIN_SRC
VAR_GLOBAL
    bKytkin AT %I* : BOOL;
    bPainonappi AT %I* : BOOL;
    bMerkkivalo AT %Q* : BOOL;
END_VAR
#+END_SRC

*bMerkkivalo* on globaali BOOL muuttuja joka on mapattu digitaalisen lähtöön.
*bPainonappi* on globaali BOOL muuttuja, joka on mapattu digitaaliseen tuloon. *bKytkin*
*on globaali BOOL muuttuja, joka on mapattu digitaaliseen tuloona.

*** Ladder diagram -ohjelmointi
LD-ohjelmointia varten lisätään PLC-projektiin uusi ohjelma, jonka tyypiksi
*(Implementation language)*
määritetään *Ladder Diagram*.

Sovelluksen oikeaan reunaan avautuu *ToolBox*, jonka alta LD-ohjelmointiin käytettävät työkalut löytyvät. LD-komponentteja voidaan lisätä ohjelmaan raahaamalla niitä *ToolBox*-ikkunasta, ja tiputtamalla ne sopivaan kohtaan
ohjelmassa. Ensimmäistä komponenttia raahatessa, se pudotetaan *Start Here* -laatikkoon.

[[file:kuvat/LDOhjelma01.png]]

Tehdään yksinkertainen AND-ohjelma joka sytyttää merkkivalon kun kiertokytkin on
asennossa 1, ja painonappia painetaan. Tätä varten tarvitaan kaksi
*Contact*-komponenttia ja yksi *Coil*-komponentti.

[[file:kuvat/LDOhjelma02.png]]

Muuttujat liitetään komponentteihin kirjoittamalla muuttuja nimi komponentin
vieressä olevaan *???*-kenttään tai klikkaamalla sen vieressä olevaan laatikkoa, jolloin
muuttujan voi valita listasta.

[[file:kuvat/MuuttujanAsettaminen01.png]]

Kun ohjelma on valmis, MAIN-ohjelmaan lisätään vielä komento, jotta ohjelmaa
ajetaan PLC:llä.
#+BEGIN_SRC
        LDOhjelma();
#+END_SRC
*LDOhjelma* on tässä ohjelman tiedostonimi.

Tässä vaiheessa projekti kannatta kääntää (ylävalikosta *Build Solution*), jotta
mahdolliset virheet tulevat näkyviin.

*** Function Block Diagram -ohjelmointi
FBD-ohjelmointimenetelmällä voidaan logiikka ohjelmoida erilaisten
funktiolohkojen avulla. PLC-projektiin lisätään ohjelmointia varten uusi
ohjelma, valiten tällä kertaa tyypiksi *Funcion Block Diagram*.

*Toolbox*-ikkunasta löytyvät FBD-ohjelmointiin tarvittavat lohkot ja niitä voi
lisätä ohjelmaan raahaamalla ne ohjelmanmuokkausnäkymään.

[[file:kuvat/FBDOhjelma03.png]]

Merkkivalon sytyttämiseen käytettävä ohjelma voidaan toteuttaa käyttämällä
*AND*-lohkoa jossa on 2-tuloa. Tuloihin määritetään muuttujat *bKytkin*
ja *bPainonappi* samaan tapaan kuin LD-ohjelmassa.

[[file:kuvat/FBDOhjelma01.png]]

*AND*-lohkon lähdöllä saadaa määritettyä *bMerkkivalo*-muuttujan tila
sijoittamalla *Assignment*-lohko *AND*-lohkon lähtöön.

[[file:kuvat/FBDOhjelma02.png]]

Tämän jälkeen voidaan
muuttuja, johon lähdön tila sijoitetaan, asettaa normaalisti.

[[file:kuvat/FBDOhjelma04.png]]

Lisätään vielä MAIN-ohjelmaan komento, jolla FBD-ohjelma suoritetaan.
#+BEGIN_SRC
    FBDOhjelma();
#+END_SRC

*** Structured Text -ohjelmointi
ST-ohjelmointimenetelmä sisältää paljon samoja rakenteita kuin korkeamman tason
ohjelmointikielet. Esimerkiksi kontrollirakenteet IF, FOR, WHILE ja CASE ovat
käytössä myös ST-ohjelmoinnissa.

ST-ohjelma lisätään samoin kuin muutkin ohjelmat, mutta valitaan tyypiksi
*Structured Text*.
Ohjelman editorina on tekstialue johon ohjelmakoodin voi kirjoittaa.
[[file:kuvat/STOhjelma01.png]]

Merkkivalon sytyttäminen kiertokytkimen asennon ja painonapin avulla
toteutettaisiin ST-ohjelmoinnissa muuttujaan sijoituksella ja AND-operaattorilla.
#+BEGIN_SRC
    GVL.bMerkkivalo := GVL.bNappi AND GVL.bKytkinAsento1;
#+END_SRC
MAIN-ohjelmaan lisätään vielä komento, jolla ohjelma ajetaan.
#+BEGIN_SRC
    STOhjelma();
#+END_SRC
Looppien (FOR, WHILE, REPEAT) käytössä on huomioitava, että PLC ohjelma
itsessään on jo eräänlainen looppi, jota ajetaan asetuksiin määritetyllä
skannausnopeudella. Looppaaminen odottaen jonkin tulon arvon muuttumista ei
myöskään toimi, koska tällöin ohjelma jumiutuu looppin.


*** Omien funktiolohkojen teko ja käyttö
TwinCAT kehitysympäristössä on PLC-ohjelmien lisäksi mahdollista tehdä myös
kokonaan omia funktiolohkoja, joita voi sen jälkeen käyttää osana ohjelmia.
Funktiolohkojen tekeminen on hyvä tapa paloitella ohjelmat pienemmiksi ja
yksinkertaisemmiksi palasiksi, jotta niiden toimintaa on helpompi ymmärtää.

Funktiolohkoja lisätään samaan tapaan kuin uusia ohjelmiakin, mutta valitaan
tyypiksi *Function Block*.

[[file:kuvat/functions/addfunction.png]]

Tämän jälkeen määritetään lohkon tulot ja lähdöt muuttujina ja tehdään lohkon
toiminnallisuus samaan tapaan kuin minkä tahansa ohjelman.

Esimerkkinä ohjelma, joka lukee lämpötila tietoa *INT* tyyppiseen muuttujaan
*iLampotila*, ja asettaa *BOOL* tyyppisen lähdön tilan. Tässä lähtö
asetetaan arvoon *TRUE* jos lämpötila nousee yli 25 asteen ja arvoon
*FALSE*, kun lämpötila on jälleen laskenut alle 20 asteen.

[[file:kuvat/functions/final.png]]

Uutta funktiolohkoa käytetään esim. FDB-ohjelmoinnissa lisäämällä
ensin *Box*-tyyppinen funktiolohko, ja valitsemalla sen tyypiksi luotu funktiolohko.

[[file:kuvat/functions/using1.png]]

Tämän jälkeen funktiolohkon tulot ja lähdöt täydentyvät ohjelmointinäkymään sitä
voidaan käyttää kuten mitä tahansa muuta funktiolohkoa.

[[file:kuvat/functions/using.png]]



* Simulointi
** Projektin simuloiminen TwinCat runtimella
PLC-ohjelmia voidaan testata TwinCatissä simuloimalla logiikka PC:llä.
Simuloinnissa PC:llä ajetaan samaa TwinCat Runtime jota myös logiikat käyttävät
joten ohjelmien tulisi käyttätyä realistisesti.

Seuraavaksi kuvataan vaihe vaiheelta miten simulointi tehdään.
1. *Varmista että sovellus kääntyy*

   Ennnen simuloinnin yrittämistä kannattaa varmistaa että sovellus kääntyy ja
   kaikki on kunnossa simulointia varten. Kääntäminen tapahtuu *Build*-valikon
   *Build Solution* komennolla.
  
   [[file:kuvat/BuildSolution.png]]
  
   Konsoliin tulostuu käännöksen tietoa käännöksestä, ja mahdolliset virheet
   jotka täytyy korjata ennen kuin sovellusta voi simuloida.
  
2. *Aktivoi konfiguraatio*

   Onnistuneen kääntämisen jälkeen tämän hetkinen konfiguraatio täytyy
   aktivoida, jolloin kaikki PLC-projektin tiedostot siirretään kohdelaitteistolle
   (tässä tapauksessa simuloidulle PLC:lle). Konfiguraation aktivointi tapahtuu
   työkalupalkin vasemmassa reunassa olevasta napista.

   [[file:kuvat/AktivoiKonfiguraatio.png]]

   TwinCat kysyy korvataanko olemassa oleva konfiguraatio.

   [[file:kuvat/AktivoiKonfiguraatio2.jpg]]

   TwinCat kysyy siirrytäänkö Run-moodiin vai pysytäänkö Config-moodissa.
   Vastataan tähän *OK*.

   [[file:kuvat/Restart.png]]

   Tämän jälkeen PLC-projekti on kopioitu simuloidulle logiikalle ja on
   *Run*-moodissa jos työkalurivillä näkyy vihreä ikoni.

3. *Login*

   Seuraavaksi suoritetaan *Login* klikkaamalla työkalupalkin ikonia.

   [[file:kuvat/Login2.png]]

   TwinCat kysyy halutaanko luoda ja ladata sovellus logiikalle.
   Vastataan *Yes*.

4. *Start*

   Kun sovellus on ladattu logiikalle klikataan työkalupalkin vihreää
   "play"-kuvaketta, jolloin sovellus käynnistetään.

   [[file:kuvat/Run.png]]

   Käynnissä olevan sovelluksen hallintaan on työkalupalkissa rivi eri toimintoja.

   [[file:kuvat/Running.png]]

** Ohjelman debuggaus ajon aikana
Kun ohjelma on käynnissä PLC:llä, voidaan sen toimintaa tutkia ja muokata ajon
aikana. Seuraavaksi käydään läpi muuttujien arvon muuttaminen ajona aikana sekä
ohjelman muuttaminen ja päivittäminen laitteelle /lennosta/.

Kun ohjelma on käynnissä PLC:llä voidaan muuttujien ja ohjelmien tilaa
tarkastella avaamalla jokin ohjelma. Muuttujien
arvoja voidaan muuttaa tuplaklikkaamalla ohjelman muokkausnäkymässä jotain
muuttujaa. BOOL tyyppiset muuttujat vaihtavat arvonsa vastakkaiseksi ja esim.
numeromuuttujien arvon pystyy kirjoittamaan kenttään.

Kokeillaan muuttaa
edellisessä luvussa tehdyd LD-ohjelman sisältämien muuttujien arvoja.
Kun muuttujaa tuplaklikataan ilmestyy sen viereen teksti *<TRUE>* tai *<FALSE>*
riippuen siitä, mikä muuttujan arvo oli aikaisemmin.

[[file:kuvat/MuutaArvo01.png]]

Muuttujan arvon muutos ei kuitenkaan ole vielä voimassa, vaan muutetut arvon
täytyy ensin
kirjoittaa PLC:n muistiin. Klikataan *Write values*-kuvaketta
työkalupalkin oikeasta reunasta.

Kun sama toimi on tehty ohjelman molemmille tulo-muuttujille (*bKytkin*
ja *bPainonappi*), muuttuu lähtö *bMerkkivalo* arvoon *TRUE* ja merkkivalo syttyy.

Myös käynnissä olevaa ohjelmaa voidaan muokata ilman että PLC:tä täytyy
käynnistää uudelleen tai konfiguraatiota tarvitsee ladata uudestaan.

Kokeillaan käynnissä olevan ohjelman muuttamista muokkaamalla edellisessä
luvussa tehtyä ST-ohjelmaa. Ennen muutosten tekoa täytyy TwinCat /kirjata ulos/
PLC:stä työkalupalkin *Logout* kuvaketta klikkaamalla.

[[file:kuvat/MuutaOhjelmaa.png]]

Tämän jälkeen muokataan ohjelmaa siten että merkkivalon sytyttämiseen vaaditaan
vain että kiertokytkin on asennossa 1.

[[file:kuvat/LoginWithChange.png]]

Kun muutos on tehty, klikataan jälleen *Login* kuvaketta, jolloin TwinCat kysyy
halutaanko kirjautuminen tehdä lataamalla muutokset laitteelle (*Login with
online change*), lataamalla PLC:llä oleva ohjelma TwinCatiin (*Login with
download*) vai ilman muutoksia (*Login without any change*). Valitaan *Login
with online change*, tällöin ohjelmaan tehdyt muutokset kopioidaan PLC:lle.


* TwinCat 3 HMI
TwinCat 3 HMI on Beckhoffin työkalu modernien PLC-käyttöliittymien luomiseen. HMI:llä
tehdyt käyttöliittymät ovat HTML5-pohjaisia ja niitä voi käyttää normaalilla
Internet-selaimella. Käyttöliittymää varten luodaan oma HMI projektinsa, joka
voidaan halutessa luoda PLC-projektin rinnalle tai omaan kansioonsa.

Ennen TwinCAT HMI projektin luomista täytyy TwinCAT 3 HMI Engineering
komponentti olla asennettuna.

# Asiaa PLC HMIstä?
** HMI projektin luominen ja muokkaaminen
Avoinna olevaan TwinCat projektiin (solution) voidaan lisätä HMI-projekti
klikkaamala oikealla ja valitsemalla *Add->New Project*. Avautuvasta ikkunasta
valitaan TwinCat HMI ja HMI Project.

**kuva**

Käyttöliittymä voidaan muokata joko käyttäen ns. WYSIWYG (What You See Is What You Get)
editoria tai suoraan muokkaamalla HTML koodia. Käyttöliittymän luominen
peruskomponenteilla on helppoa ja seuraavaksi käymme läpi käyttöliittymän
luomisen edellä tehdyille PLC-ohjelmille.

** Käyttöliittymän komponentit
\begin{marginfigure}
\includegraphics[width=.8\linewidth]{kuvat/hmi/HMIToolbox.png}
\caption{Peruskomponentit löytyvät Toolbox-ikkunasta}
\end{marginfigure}

Käyttöliittymän peruskomponentit löytyvät *Toolbox* ikkunasta (ikkunan saa
tarvittaessa näkyviin *View* valikon alta). TwinCat HMI sisältää noin
parikymmentä komponenttia yksinkertaisista tekstikentistä aina monimutkaisempiin
datan visualisointikomponentteihin asti.

Kun jokin komponentti on valittuna voidaan sen ominaisuuksia muuttaa
*Properties* ikkunan alta. *Properties* ikkunan *Events* välilehdeltä
(salamaikoni) voidaan PLC-ohjelman muuttujat linkittää käyttöliittymään.

[[file:kuvat/hmi/ButtonBinding.png]]

Seuraavaksi käsitellään peruskomponenttien *Button*, *ToggleButton* ja *Ellipse*
käyttämistä edellisessä luvussa tehtyjen ohjelmien käyttöliittymän tekemisessä.

Ensimmäisenä lisätää painonappi, jota käytetään bPainonappi muuttujan arvon
asettamiseen. Nappi lisätään raahaamalla se *ToolBox*-ikkunasta käyttöliittymän
muokausnäkymään. Elementtien tarkka asemointi on helppoa editorin apuviivojen avulla.

[[file:kuvat/hmi/Button.png]]

Seuraavaksi lisätään käyttöliittymään *ToggleButton* jolla asetetaan *bKytkin*
muuttujan arvo.

[[file:kuvat/hmi/ButtonAndToggleButton.png]]

Viimeisenä käyttöliittymään lisätään *Ellipse*, eli ellipsi. Ellipsin
täyttöväriä voidaan käyttää *bMerkkilamppu*-muuttujan arvon indikoimiseen.

[[file:kuvat/hmi/EllipseAdd.png]]

** Linkitys PLC-projektin muuttujiin
Nappi linkitetään PLC-ohjelman muuttujaan *Properties*-ikkunan olevan kentän *StateSymbol*
avulla. Kenttän arvo on tosi, aina kun nappi on alaspainettuna, ja epätosi
muulloin. Kun *StateSymbol* linkitetään PLC-projektin globaaliin *bPainonappi*
muuttujaan, vaikuttaa napin painaminen PLC-ohjelmien toimintaan.

[[file:kuvat/hmi/ButtonBinding.png]]

Seuraavaksi linkitetään ToggleButton muuttujaan *bKytkin*. Tämä tapahtuu
tuplaklikkaamalla nappia, jolloin avautuu /Actions and conditions fo [TcHmiToggleButton.onPressed]/-ikkuna.

[[file:kuvat/hmi/ActionsAndConditions.png]]

/Actions and Conditions/-ikkunasta voidaa käyttöliittymäkontrolleille lisätä
toiminnallisuuksia, jotka suoritetaan jonkin eventin yhteydessä. Tässä
tapauksessa eventti on *onPressed*, eli kun nappia painetaan.

Ikkunan vasemmassa laidassa on *Action*-steppejä, joita voidaan lisätä
suoritettavaksi. Lista sisältää myös muuttujia ja kontrolleja, joita voidaan
käyttää actioneissa. ToggleButton-kontrollilla on arvo *ToggleState*, jota voimme käyttää
*bKytkin*-muuttujan arvon asettamiseen. Sen arvo voi olla joko *Normal* tai *Active*.

Lisätään ensin ehto, jonka perusteella tila asetetaan. Valitaan vasemmasta
valikosta *Condition* ja raahataan se oikealla olevaan tyhjään tilaan.
*Condition*-actioni luo if-ehdon, jolla voidaan tarkistaa muuttujan arvo ja sen
jälkeen suorittaa toisia actioneita arvosta riippuen.

[[file:kuvat/hmi/Condition1.png]]

Tämän jälkeen valitaan vasemmasta listasta ToggleButtonin *ToggleState* arvo, ja
raahataan se IF-ehdon ensimmäiseen kenttään. Kolmanteen kenttään valitaan
arvoksi *Normal*

[[file:kuvat/hmi/Condition2.png]]

Nyt voidaan määrittää mitä tapahtuu kun käyttäjä painaa ToggleButton-nappia ja
napin tila on joko *Normal*  tai *Active*. Raahataan vasemmasta valikosta
*WriteToSymbol* sekä IF-ehdon THEN-kenttään, että ELSE-lenttään.

Tehdään molempien /Write To Symbol/-actionien ensimmäiseen kenttään linkitys
*bKytkin* muuttujaan klikkaamalla kentän vieressä olevaa neliötä, valitsemalla
/Create data binding/ ja etsimällä muuttuja.

[[file:kuvat/hmi/Condition3.png]]

Tämän jälkeen valitaan ELSE-ehdon /Write to Symbol/-actionin toiseen kenttään
(value) arvoksi /True/

[[file:kuvat/hmi/ToggleButtonAction.png]]

Viimeisenä tehdään linkitys *bMerkkivalo* muuttujan ja ellipsin täyttövärin
välille. Ellipsin tapauksessa linkitys PLC-projektin muuttujaan on erilainen,
koska sen sijaan että käyttöliittymästä muutettaisiin muuttujan tilaa, muutetaan
käyttöliittymää kun muuttujan arvo muuttuu.

Ensimmäisenä täytyy lisätä ellipsin /Properties/-ikkunan /Show Events/-välilehdelle
linkitys *bMerkkivalo*-muuttujaan. /Show
Events/-välilehti löytyy salamaikonin takaa. Linkitys tehdään kohtaan /Custom/
valitsemalla /Create data binding/ ensimmäisen kentän vieressä olevasta neliöstä
aukeavasta valikosta.
[[file:kuvat/hmi/EllipseMerkkivaloBinding.png]]

Nyt voidaan muuttujan arvon muuttumiseen lisätä toiminto. Se tapahtuu avaamalla
/Actions and Conditions/-ikkuna kynäikonista. Toiminnot määritellään samaan
tapaan kuin ToggeButton-napin tapauksessa mutta nyt muutetaankin *TciHmiEllipse::FillColor*-arvoa.

[[file:kuvat/hmi/FillColorValmis.png]]

# Linkitetään ellipsin väri bMerkkilamppu muuttujaan
** Käyttöliittymän testaus
Käyttöliittymän testaus onnistuu *Live View* ominaisuuden avulla. Ensin
varmistetaan että PLC-projekti on käynnissä kohdan /Simulointi/ ohjeiden mukaan.
Tämän jälkeen klikataan *L*-ikonia käyttöliittymäeditorin oikeassa laidassa.

#+BEGIN_EXPORT latex
\begin{marginfigure}
\includegraphics[width=.5\linewidth]{kuvat/hmi/LiveView.png}
\end{marginfigure}
#+END_EXPORT


Käyttöliittymä aukeaa uuteen ikkunaan jossa sitä voidaan testata. Kun
*Kytkin*-nappi painetaan ensin ala-asentoon, ja sen jälkeen painetaan
*Painonappi*-nappia, muuttuu ellipsin väri vihreäksi.

file:kuvat/hmi/Testaus.png

** Käyttöliittymän julkaisu
TwinCAT HMI käyttöliittymän voi julkaista, eli siirtää kohdelaitteistolle,
valitsemalla /Publish to TwinCAT HMI Server/ HMI projektin valikosta.

[[file:kuvat/hmi/Publish1.png]]

Kun julkaisua tehdään ensimmäistä kertaa, tehdään julkaisuprofiili, joka
sisältää julkaisuun tarvittavat asetukset. Profiiliin tallennetaan kohdelaitteen
IP-osoite ja portti, jotka voidaan syöttää joko manuaalisesti tai hakea
automaattisesti, jos kohdelaite on lähiverkossa. IP-osoitteen ja portin lisäksi
profiiliin voidaan tarvittaessa määrittää käyttäjänimi ja salasana sekä HTTPS-asetukset.

[[file:kuvat/hmi/Publish2.png]]

Kun profiili on luotu voidaan käyttöliittymä julkaista HMI palvelimelle
klikkaamalla /Publish/.


* Testaus PLC-laitteistolla
Kun PLC-projektia halutaan testata varsinaisella laitteistolla, tai kun projekti
halutaan viedä tuotantojärjestelmään, täytyy laitteisto ensin lisätä TwinCAT
projektiin. Laitteiston voi lisätä joko manuaalisesti tai skannaamalla.
** Laitteiston lisäys manuaalisesti TwinCAT projektiin
*** EtherCAT master laitteen lisääminen
Ensimmäisenä tulee laitteistoon lisätä EtherCAT master, jonka alle muut laitteet
lisätään. EtherCAT masterin voidaan ajatella vastaavan järjestelmän
PLC-laitetta.

Aloitetaan klikkaamalla projektipuussa I/O osion alla olevaan *Device* kohtaa
hiiren oikealla, ja valitsemalla *Add New Item*.

[[file:kuvat/Laitteet/adddevice.png]]

Avautauvasta ikkunasta valitaan *EtherCAT master* ja annetaan laitteelle sopiva
nimi. Tässä tapauksessa nimeksi annettiin CX5130.

[[file:kuvat/Laitteet/devicename.png]]

Tämän jälkeen aukeaa ikkuna *Device Found At*, johon voidaan vastata *Cancel*

[[file:kuvat/Laitteet/devicefound.png]]

Ennen terminaalimoduulien lisäämistä täytyy *EtherCAT master*-laitteen alle
lisätä vielä *EK1200* ennen kuin muita terminaalimoduuleja pystytään lisäämään.
Lisääminen tapahtuu klikkaamalla lisättyä *EtherCAT master*-laitetta hiiren
oikealla, valitsemalla *Add New Item* ja valitsemalla avautuvasta valikosta
*EK1200-5000 EtherCAT Power Supply (2A E-Bus)*

[[file:kuvat/Laitteet/ek1200.png]]

Tämän jälkeen laitepuu sisältää *EtherCAT master*-laitteen ja sen alla
terminaalimoduulin *EK1200*.

[[file:kuvat/Laitteet/ek1200added.png]]

Muiden moduulien lisääminen nyt onnistuu samaan tapaan.

*** Terminaalimoduulien lisääminen
Lisätään seuraavaksi terminaalimoduulit
- EL6731
- EL1008
- EL2008
- EL3002
- EL3201

Lopuksi lisätään vielä *EK1110*-moduuli, eli väyläcoupler. Sen avulla voidaan
järjestelmää jatkaa EtherCAT-kaapelilla.

[[file:kuvat/Laitteet/ek1110.png]]

Tässä vaiheessa laitepuu näyttää tältä.

[[file:kuvat/Laitteet/ek1110added.png]]

Kun *EK1200* terminaalimoduulin alle on lisätty väyläcoupler *EK1110*, voidaan
nyt *EtherCAT master* laitteen alle lisätä väyläcoupler johon EtherCAT-kaapeli
viedään.

Lisätään siis *EtherCAT master* laitteen alle *EK1100*.

[[file:kuvat/Laitteet/ek1100.png]]

Tämän jälkeen laitepuun tulisi näyttää ensin *EtherCAT master*-laite ja sen alla
terminaalimoduulit *EK1200* ja *EK1100*

[[file:kuvat/Laitteet/ek1100added.png]]

*EK1100*-moduulin alle lisätään sen jälkeen loput I/O moduulit
- EL1004
- EL2634
- EL4002

Viimeiseksi lisätään vielä *EL9011 end cap* jollainen tulee laitta aina
järjestelmän viimeiseksi moduuliksi.

Lopullinen laitepuu näyttää tältä

[[file:kuvat/Laitteet/final.png]]

** Laitteiston lisäys skannaamalla
I/O-laitteisto voidaan lisätä myös automaattisesti skannaamalla verkkoon
liitetty PLC-laitteisto. Skannaamalla saadaan kaikki laitteet lisättyä kerralla
,ja varmasti oikein, joten jos mahdollista kannattaa sitä käyttää. Skannauksen
onnistumiseksi täytyy PLC-laitteiston olla samassa lähiverkossa kuin käytettävä tietokone.

Skannaaminen tapahtuu asettamalla TwinCAT Runtime ensin konfiguraatiotilaan
klikkaamalla työkalupalkista *Configuration Mode* ikonia.

Sitten täytyy PLC-laitteseen muodostaa yhteys. Ensin valitaan yläpalkin *target*
alasvetovalikosta **Choose Target System**, jolloin aukeaa laitteiden hakuun
käytettävä ikkuna.

[[file:kuvat/Skannaus/Connect01.png]]

Laittiden hakuikkunasta valitaan **Search (Ethernet)**, jos PLC-laitteen
IP-osoite ei ole tiedossa. Jos IP-osoite tiedetään voidaan se syöttää suoraan.

[[file:kuvat/Skannaus/Connect02.png]]

Kun PLC-laite on löydetty verkosta, ja se on valittu **target** valikosta,
voidaan se skannata.

Skannaus aloitetaan klikkaamalla projektipuun **I/O** kohdan alla kohtaa
**Devices** hiiren oikealla ja valitsemalla **Scan**.

[[file:kuvat/Skannaus/Scan01.png]]

Kun skannaus lähiverkosta
on tehty, näyttää TwinCAT mitä laitteita se löysi. Koulun laitteiston
tapauksessa löydetään neljä laitetta.

[[file:kuvat/Skannaus/Scan02.png]]

**Device 1** on CX5130, eli PLC laite jolla ohjelmat ajetaan.
**Device 2** on EK1110, eli EtherCAT coupler jonka avulla järjestelmää voidaan
jatkaa EtherCAT kaapelilla.
**Device 3** on EK1100, eli EtherCAT coupler jota käytetään EtherCAT kaapelin
toisessa päässä järjestelmää jatkettaessa.
**Device 5** on EL6731, eli ProfiBUS liitäntä moduuli jolla järjestelmää voidaan
jatkaa ProfiBUS väylään.

Näistä lisätään TwinCAT projektiin laitteet 1 ja 5 valitsemalla ne ja
klikkaamalla **OK**. Vastataan vielä **OK** kun TwinCAT kysyy halutaanko myös moduulit skannata
(kuva?). Tämän jälkeen projektipuuhun, kohtaan **Devices**, ilmestyy
kolme laitetta.

[[file:kuvat/Skannaus/Scan03.png]]

**EL6731** ProfiBUS moduulin COM-portti näkyy siis erillisenä laitteena.

** Muuttujien linkittäminen tuloihin ja lähtöihin
Kun laitteisto on lisätty projektiin, voidaan ohjelmissa käytetyt muuttujat
linkittää laitteiston tuloihin ja lähtöihin. Linkittäminen voidaan tehdä joko moduulin tietojan kautta laitepuusta, tai
PLC-projektin alta.

PLC-projektin alta linkittäminen tapahtuu aukaisemalla **Instance** kohta, ja
edelleen sen alta joko **PlcTask Inputs** tai **PlcTask Outputs** riippuen siitä
ollaanko linkittämässä tuloa vai lähtöä. Sen jälkeen klikataan haluttua
muuttujaa oikealla ja valitaan **Change Link**

[[file:kuvat/Skannaus/Link02.png]]

Laitepuusta linkittäminen tapahtuu aukaisemalla halutun moduulin alta ensin
tulo/lähtö (esim. Channel 1) ja sen jälkeen klikkaamalla **Output** tai
**Input** kohtaa oikealla ja valitsemalla **Change Link**.

[[file:kuvat/Skannaus/Link03.png]]

Molemmilla tavoilla aukeaa linkitysikkuna josta voidaan valita joko haluttua
tulo/lähtö tai haluttu muuttuja, johon linkitetään.


* Ongelmatilanteet
** Virtuaalikoneet
Koska TwinCat ajaa PLC emulaatiota PC:llä saattaa se aiheuttaa ongelmia,
jos samaan aikaan on käytössä muita virtuaalikoineita. TwinCat projektia ei tässä
esimerkiksi pysty asettamaan Run-moodiin, jos samaan aikaan PC:llä on käynnissä VirtualBox.
** Core isolation
TwinCat projekti voidaan ajaa eristettynä yhdellä prosessorin ytimellä Core
Isolation ominaisuuden avulla. Core Isolation löytyy projektin SYSTEM osion alta.
** BIOS asetukset
Hyper-Threading pois päältä
*** Hyper-Threading *pois päältä*
*** Intel Virtualization Technology Extensions (VT-x) *päälle*

* Lähteet
** https://download.beckhoff.com/download/document/catalog/TwinCAT_3_Booklet.pdf
** http://www.contactandcoil.com/twincat-3-tutorial/quick-start/

* Linkkejä
** Structured Text -ohjelmointi
https://www.plcacademy.com/structured-text-tutorial.pdf

