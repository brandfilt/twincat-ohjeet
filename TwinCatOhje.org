#+TITLE: TwinCat 3 Opas
#+STARTUP: showall
* Oppaan käytöstä
Esimerkit,
* Mikä TwinCat?
TwinCat (The Windows Control and Automation Technology) on Beckhoffin
automaatiojärjestelmien ydin.

Se on PC-pohjainen ohjelmisto, joka muuttaa minkä tahansaPC:n tehokkaaksi automaatiojärjestelmien ohjaimeksi.

TwinCat 3 on ohjelmiston uusin versio, jonka avulla automaatiohjelmointia
voidaan tehdä IEC 61131-3 standardin mukaisten kielten lisäksi C ja C++
ohjelmointikielillä. Twincat 3 on rakennettu Microsoftin Visual Studio
ohjelmointiympäristön päälle.
* Asennus ja ensimmäinen käynnistys
** Vaatimukset
- Windows XP tai uudempi
- Prosessori 1.6Ghz
- 2GB RAM
- 3GB kiintolevytilaa
** Lisenssi
TwinCat 3 lisenssi on täysin ilmainen mutta sen lisenssi on luotava uudelleen 7
päivän välein. Lisenssin aktivointi tapahtuu TwinCat projektin SYSTEM kohdan alla
olevasta License kohdasta.
#+ATTR_HTML: width="300"
[[file:kuvat/Lisenssi01.png]]
Kehityskoneen lisenssin voi aktivoida klikkaamalla "Activate 7 Days Trial
License..." ja täyttämällä kysytty koodi.

* Ensimmäinen PLC projekti
** Uusi projekti
Uusi PLC projekti aloitetaan valitsemalla Visual Studio File valikosta New
Project.

#+ATTR_HTML: :width="300px"
[[file:kuvat/UusiProjekti01.png]]

Sen jälkeen valitaan Template valikosta TwinCAT Project XAE, annetaan
projektille nimi ja sijainti ja luodaan projekti klikkaamalla OK.

#+ATTR_HTML: width="300"
[[file:kuvat/UusiProjekti03.png]]
** PLC projekti
Kun TwinCat projekti on luotu, täytyy siihen vielä lisästä PLC projekti,
jotta päästään ohjelmoimaan. TwinCatissä jokainen PLC projekti vastaa
"virtuaalista" logiikkakontrolleria. PLC-projekti sisältää ohjelmat, muuttujat
ja käyttöliittymät jotka logiikalle ladataan.

PLC-projektin lisäys tapahtuu klikkaamalla hiiren oikealla
puunäkymän kohtaa PLC, ja valitsemalla Add New Item.
[[file:kuvat/LisaaPLCProjekti01.png]]

Avautuvasta ikkunasta valitaan projektityypiksi Standard PLC Project, annetaan projektille nimi ja
klikataan OK.
[[file:kuvat/PLCProjekti02.png]]

Projektin puunäkymään PLC-kohdan alle ilmestyy luotu projekti tiedostoineen.
[[file:kuvat/PLCProjektiSisalto01.png]]
*** Kansiorakenne
PLC projektin alle luodaan automaattisesti kansiorakenne, joista tärkeimmät ovat:
- *References* Ulkoisten kirjastojen lisääminen.
- *DUTs* Data Unit Types, tietotyyppien määrittelyt.
- *GVL* Globaalien muuttujien määrittely. Globaalit muuttujat ovat käytettävissä
  kaikissa logiikkaohjelmissa ja käyttöliittymässä.
- *POU* Program Organization Unit, sisältää logiikkaohjelmat ja niihin liittyvät
  paikalliset muuttujat.
- *VISUs* Käyttöliittymien määrittely ja luominen.

* Ohjelmointi
TwinCat 3 tukee kaikkia IEC 61131-3 standardin mukaisia ohjelmointimenetelmiä,
eli LD (Ladder diagram), FBD (Function Block Diagram), ST (Structured Text), IL
(Instruction List) ja SFC (Sequential Function Chart). Tässä ohjeessa käydään
läpi lyhyesti LD, FBD ja ST ohjelmointimenetelmien käyttö TwinCat 3:ssa. Näistä
ST on tekstipohjainen ja muistuttaa eniten korkeamman tason ohjelmointikieliä
kuten (PHP, Python tai C). ST on myös
Beckhoffin suosittelema PLC ohjelmointitapa.
** PLC ohjelman lisäys
Kun projektiin lisää PLC projektin, luo TwinCat automaattisesti MAIN-ohjelman
PLC-projektin kansioon POU. MAIN-ohjelma on ST-ohjelma, joka on oletuksena
tyhjä. Yksinkertaisen ohjelman voi toteuttaa halutessaan suoraan
MAIN-tiedostoon, mutta monimutkaisemmat logiikkaohjelmat kannattaa jakaa
useampaan tiedostoon.

POU-kansioon voidaan lisätä eri ohjelmointimenetelmillä
toteutettuja ohjelmia eri klikkaamalla kansiota hiiren oikealla ja valitsemalla
*Add* ja *POU*. Avautuvasta ikkunasta voidaan valita ohjelmointimenetelmä ja
antaa ohjelmalle nimi.
[[file:kuvat/LisaaOhjelma01.png]]
[[file:kuvat/LisaaOhjelma02.png]]

Uudet ohjelmat eivät automaattisesti ole "käytössä" vaan ne pitää erikseen
määritellä ajettavaksi. Tämä voidaan tehdä esimerkiksi suorittamalla uusi
ohjelma MAIN-ohjelmasta käsin.
#+BEGIN_SRC
    UusiOhjelma();
#+END_SRC

** Muuttujat
Muuttujia voidaan TwinCatissä määrittää joko paikallisesti tai globaalisti.
Paikalliset muuttujat ovat yhden logiikkaohjelman käytössä, eikä niiden arvoihin
ole pääsyä muista ohjelmista. Globaaleja muuttujia voidaan käyttää kaikista
PLC-projektin ohjelmista ja käyttöliittymistä. Globaalit muuttuja ovat myös
mahdollista liittää johonkin fyysiseen tuloon tai lähtöön.

Eri muuttujatyyppejä ovat mm. BOOL, INT, UINT, REAL, TIME, DATE, ARRAY jne.
Myös ajastimet ja triggerit määritetään muuttujina. Ajastimen tyypi on TON??

*** Ohjelman muuttujat
PLC-ohjelman muuttujat voidaan asettaa ohjelman muokkausikkunan yläosassa
olevasta editorista.
Määrittely voidaan tehdä joko tekstipohjaisesti, taulukkona tai Auto Declare
ikkunan avulla.

Tekstipohjainen muuttujien määrittely tapahtuu formaatissa:
#+BEGIN_SRC
    /muuttujanNimi/ : /tyyppi/;
#+END_SRC
Esim.
#+BEGIN_SRC
    muuttuja1 : BOOL;
#+END_SRC

[[file:kuvat/Muuttujat01.png]]
[[file:kuvat/Muuttujat02.png]]
*** Globaalit muuttujat
Globaalien muuttujien avulla tulot ja lähdöt saadaan helposti liitettyä
ohjelmissa käytettäviin muuttujiin. Muuttujien määrittely onnistuu lisäämällä
GVL kansioon lista, joka sisältää halutut muuttuja. Muuttujien lisäys listaan tapahtuu
samalla tavalla kuin paikallisten muuttujien lisäys ohjelmiin.

Muuttujaan voidaan määrittää myös erityinen rekisteriosoite, joka voidaan myöhemmin mapata johonkin
fyysiseen tuloon tai lähtöön. Määrittäminen tapahtuu lisäämällä muuttujan nimen
perään AT ja halutun rekisterin tyyppi ja osoite %-merkin jälkeen. Rekisterin
tyyppi ja osoite erotetaan X-kirjaimella.
Esim. input rekisteri 0.0

#+BEGIN_SRC
    /muuttujanNimi/ AT %IX0.0 : /tyyppi/;
#+END_SRC
Asettamalla osoitteen tilalle tähti (*), mapataan osoite automaattisesti.

#+BEGIN_SRC
    /muuttujanNimi/ AT %I* : /tyyppi/;
#+END_SRC
Muuttujat voidaan linkittää johonkin lähtöön tai tuloon I/O valikon alta, kun
laitteet on lisätty.

Output rekisterit määritetään korvaamall I-kirjain Q:lla.

#+BEGIN_SRC
    /muuttujanNimi/ AT %QX0.0 : /tyyppi/;
#+END_SRC
Kun projekti käännetään muuttujien määrittämisen jälkeen (*Build Solution*),
ilmestyy PLC-projektin alla olevaan virtuaaliseen logiikkaohjaimeen (*PLC
Instance*) globaaleja muuttujia vastaavat lähdöt ja tulot.

Kun globaaleja muuttujia halutaan käyttään ohjelmissa, täytyy muuttujan nimen
eteen lisätä sen tiedoston nimi jossa muuttuja on määritelty. Esim *GVL.muuttujanNimi*
** Ohjelmointiesimerkit
Seuraavaksi esitellään LD, FBD ja ST ohjelmointia yksinkertaisen esimerkin
avulla. Ennen esimerkkien tekemistä tulisi määrittää globaalit *BOOL* muuttujat
bMerkkivalo, bKiertokytkin1 ja bPainonappi GVL-tiedostoon.

#+BEGIN_SRC
VAR_GLOBAL
    bKiertokytkin1 AT %I* : BOOL;
    bPainonappi AT %I* : BOOL;
    bMerkivalo AT %Q* : BOOL;
END_VAR
#+END_SRC

*bMerkkivalo* on globaali BOOL muuttuja joka on mapattu digitaalisen lähtöön.
*bPainonappi* on globaali BOOL muuttuja, joka on mapattu digitaaliseen tuloon. *bKiertokytkin1*
*on globaali BOOL muuttuja, joka on mapattu digitaaliseen tuloona.

*** Ladder diagram -ohjelmointi
LD-ohjelmointia varten lisätään PLC-projektiin uusi ohjelma, jonka tyypiksi
*(Implementation language)*
määritetään *Ladder Diagram*.

Sovelluksen oikeaan reunaan avautuu *ToolBox*, jonka alta LD-ohjelmointiin käytettävät työkalut löytyvät. LD-komponentteja voidaan lisätä ohjelmaan raahaamalla niitä *ToolBox*-ikkunasta, ja tiputtamalla ne sopivaan kohtaan
ohjelmassa. Ensimmäistä komponenttia raahatessa, se pudotetaan *Start Here* -laatikkoon.

[[file:kuvat/LDOhjelma01.png]]

Tehdään yksinkertainen AND-ohjelma joka sytyttää merkkivalon kun kiertokytkin on
asennossa 1, ja painonappia painetaan. Tätä varten tarvitaan kaksi
*Contact*-komponenttia ja yksi *Coil*-komponentti.

[[file:kuvat/LDOhjelma02.png]]

Muuttujat liitetään komponentteihin kirjoittamalla muuttuja nimi komponentin
vieressä olevaan *???*-kenttään tai klikkaamalla sen vieressä olevaan laatikkoa, jolloin
muuttujan voi valita listasta.

[[file:kuvat/MuuttujanAsettaminen01.png]]

Kun ohjelma on valmis, MAIN-ohjelmaan lisätään vielä komento, jotta ohjelmaa
ajetaan PLC:llä.
#+BEGIN_SRC
        LDOhjelma();
#+END_SRC
*LDOhjelma* on tässä ohjelman tiedostonimi.

Tässä vaiheessa projekti kannatta kääntää (ylävalikosta *Build Solution*), jotta
mahdolliset virheet tulevat näkyviin.

*** Function Block Diagram -ohjelmointi
*** Structured Text -ohjelmointi
ST-ohjelmointimenetelmä sisältää paljon samoja rakenteita kuin korkeamman tason
ohjelmointikielet. Esimerkiksi kontrollirakenteet IF, FOR, WHILE ja CASE ovat
käytössä myös ST-ohjelmoinnissa.

ST-ohjelma lisätään samoin kuin muutkin ohjelmat, mutta valitaan tyypiksi
*Structured Text*.
Ohjelman editorina on tekstialue johon ohjelmakoodin voi kirjoittaa.
[[file:kuvat/STOhjelma01.png]]

Merkkivalon sytyttäminen kiertokytkimen asennon ja painonapin avulla
toteutettaisiin ST-ohjelmoinnissa muuttujaan sijoituksella ja AND-operaattorilla.
#+BEGIN_SRC
    GVL.bMerkkivalo := GVL.bNappi AND GVL.bKytkinAsento1;
#+END_SRC
MAIN-ohjelmaan lisätään vielä komento, jolla ohjelma ajetaan.
#+BEGIN_SRC
    STOhjelma();
#+END_SRC
Looppien (FOR, WHILE, REPEAT) käytössä on huomioitava, että PLC ohjelma
itsessään on jo eräänlainen looppi, jota ajetaan asetuksiin määritetyllä
skannausnopeudella. Looppaaminen odottaen jonkin tulon arvon muuttumista ei
myöskään toimi, koska tällöin ohjelma jumiutuu looppin.

* Simulointi
** Projektin simuloiminen TwinCat runtimella
- Aktivoi konfiguraatio
** Ohjelman debuggaus ajon aikana
- PLC ohjelmaa ja muuttujien arvoja voidaan tarkastella ja muuttaa ajon aikana.


* HMI käyttöliittymä
** Eri toteutustavat
** Web toteutuksen vaiheet
** UI mäppäys muuttujiin

* I/O mäppäys laitteisiin
** EtherCat laitteiden lisääminen
** Terminaalimoduulien lisääminen

* Ongelmatilanteet
** Virtuaalikoneet
Koska TwinCat ajaa PLC emulaatiota PC:llä saattaa se aiheuttaa ongelmia,
jos samaan aikaan on käytössä muita virtuaalikoineita. TwinCat projektia ei tässä
esimerkiksi pysty asettamaan Run-moodiin, jos samaan aikaan PC:llä on käynnissä VirtualBox.
** Core isolation
TwinCat projekti voidaan ajaa eristettynä yhdellä prosessorin ytimellä Core
Isolation ominaisuuden avulla. Core Isolation löytyy projektin SYSTEM osion alta.
** BIOS asetukset
Hyper-Threading pois päältä
*** Hyper-Threading *pois päältä*
*** Intel Virtualization Technology Extensions (VT-x) *päälle*

* Ohjelman asetukset
- Nopeuden säätö (cycle ticks jne.)

* Lähteet
** https://download.beckhoff.com/download/document/catalog/TwinCAT_3_Booklet.pdf
** http://www.contactandcoil.com/twincat-3-tutorial/quick-start/

* Linkkejä
** Structured Text -ohjelmointi
https://www.plcacademy.com/structured-text-tutorial.pdf
